{"version":3,"sources":["utils/auth.js","utils/localStorage.js","utils/mutations.js","pages/CreateTask.js","components/LoginForm.js","utils/queries.js","pages/SavedTasks.js","components/SignupForm.js","components/Navbar.js","App.js","index.js"],"names":["decode","this","getToken","token","isTokenExpired","exp","Date","now","err","localStorage","getItem","idToken","setItem","window","location","assign","removeItem","removeTaskId","inputTaskId","taskIds","JSON","parse","updatedTaskIds","filter","taskId","stringify","LOGIN_USER","gql","ADD_USER","Create_TASK","REMOVE_TASK","CreateTask","useState","savedTaskIds","setSavedTaskIds","content","setTaskContent","title","setTaskTitle","useMutation","saveTask","useEffect","taskIdArr","length","handleSaveTask","a","taskToSave","Auth","loggedIn","variables","newTask","console","error","Jumbotron","fluid","className","Container","Form","Row","Col","xs","md","Control","name","value","onChange","e","target","type","size","placeholder","Button","onClick","variant","LoginForm","email","password","userFormData","setUserFormData","validated","showAlert","setShowAlert","login","handleInputChange","event","handleFormSubmit","preventDefault","currentTarget","checkValidity","stopPropagation","data","noValidate","onSubmit","Alert","dismissible","onClose","show","Group","Label","htmlFor","required","Feedback","disabled","GET_ME","SavedTasks","useQuery","loading","removeTask","userData","me","handleDeleteTask","tasks","CardColumns","map","task","Card","key","border","Body","Title","Text","_id","SignupForm","username","addUser","AppNavbar","showModal","setShowModal","Navbar","bg","expand","Brand","as","Link","to","Toggle","aria-controls","Collapse","id","Nav","logout","Modal","onHide","aria-labelledby","Tab","defaultActiveKey","Header","closeButton","Item","eventKey","Content","Pane","handleModalClose","httpLink","createHttpLink","uri","authLink","setContext","_","headers","authorization","client","ApolloClient","link","concat","cache","InMemoryCache","App","ApolloProvider","exact","path","component","render","ReactDOM","document","getElementById"],"mappings":"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","file":"static/js/main.6fabfa24.chunk.js","sourcesContent":["// use this to decode a token and get the user's information out of it\nimport decode from 'jwt-decode';\n\n// create a new class to instantiate for a user\nclass AuthService {\n  // get user data\n  getProfile() {\n    return decode(this.getToken());\n  }\n\n  // check if user's logged in\n  loggedIn() {\n    // Checks if there is a saved token and it's still valid\n    const token = this.getToken();\n    return !!token && !this.isTokenExpired(token); // handwaiving here\n  }\n\n  // check if token is expired\n  isTokenExpired(token) {\n    try {\n      const decoded = decode(token);\n      if (decoded.exp < Date.now() / 1000) {\n        return true;\n      } else return false;\n    } catch (err) {\n      return false;\n    }\n  }\n\n  getToken() {\n    // Retrieves the user token from localStorage\n    return localStorage.getItem('id_token');\n  }\n\n  login(idToken) {\n    // Saves user token to localStorage\n    localStorage.setItem('id_token', idToken);\n    window.location.assign('/saved');\n  }\n\n  logout() {\n    // Clear user token and profile data from localStorage\n    localStorage.removeItem('id_token');\n    // this will reload the page and reset the state of the application\n    window.location.assign('/');\n  }\n}\n\nexport default new AuthService();\n","export const getSavedTaskIds = () => {\n  const savedTaskIds = localStorage.getItem('taskIds')\n    ? JSON.parse(localStorage.getItem('taskIds'))\n    : [];\n\n  return savedTaskIds;\n};\n\nexport const taskIds = (taskIdArr) => {\n  if (taskIdArr.length) {\n    localStorage.setItem('taskIds', JSON.stringify(taskIdArr));\n  } else {\n    localStorage.removeItem('taskIds');\n  }\n};\n\nexport const removeTaskId = (inputTaskId) => {\n  const taskIds = localStorage.getItem('taskIds')\n    ? JSON.parse(localStorage.getItem('taskIds'))\n    : null;\n\n  if (!taskIds) {\n    return false;\n  }\n\n  const updatedTaskIds = taskIds?.filter((taskId) => taskId !== inputTaskId);\n  localStorage.setItem('taskIds', JSON.stringify(updatedTaskIds));\n\n  return true;\n};\n","import { gql } from '@apollo/client';\n\nexport const LOGIN_USER = gql`\n  mutation login(\n    $email: String!\n    $password: String!\n  ) {\n    login(\n      email: $email\n      password: $password\n    ) {\n      token\n      user {\n        _id\n        username\n      }\n    }\n  }\n`;\n\nexport const ADD_USER = gql`\n  mutation addUser(\n    $username: String!\n    $email: String!\n    $password: String!\n  ) {\n    addUser(\n      username: $username\n      email: $email\n      password: $password\n    ) {\n      token\n      user {\n        _id\n        username\n        email\n        taskCount\n        tasks {\n          title\n          content\n        }\n      }\n    }\n  }\n`;\n\nexport const Create_TASK = gql`\n  mutation createTask($newTask: InputTask!) {\n    saveTask(newTask: $newTask) {\n      _id\n      username\n      email\n      tasks {\n        title\n        content\n      }\n    }\n  }\n`;\n\nexport const REMOVE_TASK = gql`\n  mutation removeTask($taskId: ID!) {\n    removeTask(taskId: $taskId) {\n      _id\n      username\n      email\n      tasks {\n        title\n        content\n      }\n    }\n  }\n`;","import React, { useState, useEffect } from 'react';\nimport { Jumbotron, Container, Col, Form, Button} from 'react-bootstrap';\nimport Auth from '../utils/auth';\nimport { taskIds,getSavedTaskIds} from '../utils/localStorage';\nimport { useMutation } from '@apollo/client';\nimport { Create_TASK } from '../utils/mutations';\n\nconst CreateTask = () => {\n  const [savedTaskIds, setSavedTaskIds] = useState(getSavedTaskIds());\n  const [content, setTaskContent] = useState('');\n  const [title, setTaskTitle] = useState('');\n  const [saveTask] = useMutation(Create_TASK);\n\n  useEffect(() => {\n    return () => taskIds(savedTaskIds);\n  });\n\n  const handleSaveTask = async (title, content) => {\n    const taskToSave = {title, content};\n    const token = Auth.loggedIn() ? Auth.getToken() : null;\n\n    if (!token) {\n      return false;\n    }\n\n    try {\n      await saveTask({\n        variables: { newTask: { ...taskToSave } },\n      });\n\n      setSavedTaskIds([...savedTaskIds, taskToSave.title]);\n      window.location.assign('/saved');\n    } catch (err) {\n      console.error(err);\n    }\n  };\n\n  return (\n    <>\n      <Jumbotron fluid className='text-light bg-dark'>\n        <Container>\n          <h1>Create Task</h1>\n          <Form>\n            <Form.Row>\n              <Col xs={12} md={8}>\n                <Form.Control\n                  name='title'\n                  value={title}\n                  onChange={(e) => setTaskTitle(e.target.value)}\n                  type='text'\n                  size='lg'\n                  placeholder='Task Title'\n                />\n              </Col>\n              <Col xs={12} md={8}>\n                <Form.Control\n                  name='content'\n                  value={content}\n                  onChange={(e) => setTaskContent(e.target.value)}\n                  type='text'\n                  size='lg'\n                  placeholder='Task Content'\n                />\n              </Col>\n              <Col xs={12} md={4}>\n                <Button onClick={() => handleSaveTask(title, content)} variant='success' size='lg'>\n                  Submit\n                </Button>\n              </Col>\n            </Form.Row>\n          </Form>\n        </Container>\n      </Jumbotron>\n \n    </>\n  );\n};\n\nexport default CreateTask;","// see SignupForm.js for comments\nimport React, { useState, useEffect } from 'react';\nimport { Form, Button, Alert } from 'react-bootstrap';\n\nimport { useMutation } from '@apollo/client';\nimport { LOGIN_USER } from '../utils/mutations';\nimport Auth from '../utils/auth';\n\nconst LoginForm = () => {\n  const [userFormData, setUserFormData] = useState({ email: '', password: '' });\n  const [validated] = useState(false);\n  const [showAlert, setShowAlert] = useState(false);\n  const [login, { error }] = useMutation(LOGIN_USER);\n\n  useEffect(() => {\n    if (error) {\n      setShowAlert(true);\n    } else {\n      setShowAlert(false);\n    }\n  }, [error]);\n\n  const handleInputChange = (event) => {\n    const { name, value } = event.target;\n    setUserFormData({ ...userFormData, [name]: value });\n  };\n\n  const handleFormSubmit = async (event) => {\n    event.preventDefault();\n\n    // check if form has everything (as per react-bootstrap docs)\n    const form = event.currentTarget;\n    if (form.checkValidity() === false) {\n      event.preventDefault();\n      event.stopPropagation();\n    }\n\n    try {\n      const { data } = await login({\n        variables: { ...userFormData }\n      });\n\n      Auth.login(data.login.token);\n\n    } catch (err) {\n      console.error(err);\n    }\n\n    setUserFormData({\n      email: '',\n      password: '',\n    });\n  };\n\n  return (\n    <>\n      <Form noValidate validated={validated} onSubmit={handleFormSubmit}>\n        <Alert dismissible onClose={() => setShowAlert(false)} show={showAlert} variant='danger'>\n          Something went wrong with your login credentials!\n        </Alert>\n        <Form.Group>\n          <Form.Label htmlFor='email'>Email</Form.Label>\n          <Form.Control\n            type='text'\n            placeholder='Your email'\n            name='email'\n            onChange={handleInputChange}\n            value={userFormData.email}\n            required\n          />\n          <Form.Control.Feedback type='invalid'>Email is required!</Form.Control.Feedback>\n        </Form.Group>\n\n        <Form.Group>\n          <Form.Label htmlFor='password'>Password</Form.Label>\n          <Form.Control\n            type='password'\n            placeholder='Your password'\n            name='password'\n            onChange={handleInputChange}\n            value={userFormData.password}\n            required\n          />\n          <Form.Control.Feedback type='invalid'>Password is required!</Form.Control.Feedback>\n        </Form.Group>\n        <Button\n          disabled={!(userFormData.email && userFormData.password)}\n          type='submit'\n          variant='success'>\n          Submit\n        </Button>\n      </Form>\n    </>\n  );\n};\n\nexport default LoginForm;","import { gql } from '@apollo/client';\n\nexport const GET_ME = gql`\n  {\n    me {\n      _id\n      username\n      email\n      taskCount\n      tasks {\n        title\n        content\n      }\n    }\n  }\n`;","import React from 'react';\nimport { Jumbotron, Container, CardColumns, Card, Button } from 'react-bootstrap';\nimport Auth from '../utils/auth';\nimport { removeTaskId } from '../utils/localStorage';\nimport { useQuery, useMutation } from '@apollo/client';\nimport { GET_ME } from '../utils/queries';\nimport { REMOVE_TASK } from '../utils/mutations';\n\nconst SavedTasks = () => {\n  const { loading, data } = useQuery(GET_ME);\n  const [removeTask] = useMutation(REMOVE_TASK);\n  const userData = data?.me || {};\n\n  // create function that accepts the book's mongo _id value as param and deletes the book from the database\n  const handleDeleteTask = async (taskId) => {\n    const token = Auth.loggedIn() ? Auth.getToken() : null;\n\n    if (!token) {\n      return false;\n    }\n\n    try {\n      await removeTask({\n        variables: { taskId },\n      });\n\n      removeTaskId(taskId);\n    } catch (err) {\n      console.error(err);\n    }\n  };\n\n  if (loading) {\n    return <h2>LOADING...</h2>;\n  }\n\n  return (\n    <>\n      <Jumbotron fluid className='text-light bg-dark'>\n        <Container>\n          <h1>Viewing saved tasks!</h1>\n        </Container>\n      </Jumbotron>\n      <Container>\n        <h2>\n          {userData.tasks.length\n            ? `Viewing ${userData.tasks.length} saved ${userData.tasks.length === 1 ? 'task' : 'tasks'}:`\n            : 'You have no saved tasks!'}\n        </h2>\n        <CardColumns>\n          {userData.tasks.map((task) => {\n            return (\n              <Card key={task.title} border='dark'>\n                \n                <Card.Body>\n                  <Card.Title>{task.title}</Card.Title>\n                  <Card.Text>{task.content}</Card.Text>\n                  <Button className='btn-block btn-danger' onClick={() => handleDeleteTask(task._id)}>\n                    Delete this Task!\n                  </Button>\n                </Card.Body>\n              </Card>\n            );\n          })}\n        </CardColumns>\n      </Container>\n    </>\n  );\n};\n\nexport default SavedTasks;","import React, { useState, useEffect } from 'react';\nimport { Form, Button, Alert } from 'react-bootstrap';\nimport { useMutation } from '@apollo/client';\nimport { ADD_USER } from '../utils/mutations';\nimport Auth from '../utils/auth';\n\nconst SignupForm = () => {\n  // set initial form state\n  const [userFormData, setUserFormData] = useState({ \n    username: '', \n    email: '', \n    password: '' \n  });\n\n  // set state for form validation\n  const [validated] = useState(false);\n  // set state for alert\n  const [showAlert, setShowAlert] = useState(false);\n\n  const [addUser, { error}] = useMutation(ADD_USER);\n\n  useEffect(() => {\n    if (error) {\n      setShowAlert(true);\n    } else {\n      setShowAlert(false);\n    }\n  }, [error]);\n\n  const handleInputChange = (event) => {\n    const { name, value } = event.target;\n\n    setUserFormData({\n      ...userFormData,\n      [name]: value \n    });\n  };\n\n  const handleFormSubmit = async (event) => {\n    event.preventDefault();\n\n    // check if form has everything (as per react-bootstrap docs)\n    const form = event.currentTarget;\n    if (form.checkValidity() === false) {\n      event.preventDefault();\n      event.stopPropagation();\n    }\n\n    try {\n      const { data } = await addUser({\n        variables: { ...userFormData },\n      });\n\n      Auth.login(data.addUser.token);\n    } catch (err) {\n      console.error(err);\n    }\n\n    setUserFormData({\n      username: '',\n      email: '',\n      password: '',\n    });\n  };\n\n  return (\n    <>\n      {/* This is needed for the validation functionality above */}\n      <Form noValidate validated={validated} onSubmit={handleFormSubmit}>\n        {/* show alert if server response is bad */}\n        <Alert dismissible onClose={() => setShowAlert(false)} show={showAlert} variant='danger'>\n          Something went wrong with your signup!\n        </Alert>\n\n        <Form.Group>\n          <Form.Label htmlFor='username'>Username</Form.Label>\n          <Form.Control\n            type='text'\n            placeholder='Your username'\n            name='username'\n            onChange={handleInputChange}\n            value={userFormData.username}\n            required\n          />\n          <Form.Control.Feedback type='invalid'>Username is required!</Form.Control.Feedback>\n        </Form.Group>\n\n        <Form.Group>\n          <Form.Label htmlFor='email'>Email</Form.Label>\n          <Form.Control\n            type='email'\n            placeholder='Your email address'\n            name='email'\n            onChange={handleInputChange}\n            value={userFormData.email}\n            required\n          />\n          <Form.Control.Feedback type='invalid'>Email is required!</Form.Control.Feedback>\n        </Form.Group>\n\n        <Form.Group>\n          <Form.Label htmlFor='password'>Password</Form.Label>\n          <Form.Control\n            type='password'\n            placeholder='Your password'\n            name='password'\n            onChange={handleInputChange}\n            value={userFormData.password}\n            required\n          />\n          <Form.Control.Feedback type='invalid'>Password is required!</Form.Control.Feedback>\n        </Form.Group>\n        <Button\n          disabled={!(userFormData.username && userFormData.email && userFormData.password)}\n          type='submit'\n          variant='success'>\n          Submit\n        </Button>\n      </Form>\n    </>\n  );\n};\n\nexport default SignupForm;","import React, { useState } from 'react';\nimport { Link } from 'react-router-dom';\nimport { Navbar, Nav, Container, Modal, Tab } from 'react-bootstrap';\nimport SignUpForm from './SignupForm';\nimport LoginForm from './LoginForm';\n\nimport Auth from '../utils/auth';\n\nconst AppNavbar = () => {\n  // set modal display state\n  const [showModal, setShowModal] = useState(false);\n\n  return (\n    <>\n      <Navbar bg='dark' variant='dark' expand='lg'>\n        <Container fluid>\n          <Navbar.Brand as={Link} to='/'>\n            Task Manager Application\n          </Navbar.Brand>\n          <Navbar.Toggle aria-controls='navbar' />\n          <Navbar.Collapse id='navbar'>\n            <Nav className='ml-auto'>\n              \n              {/* if user is logged in show saved books and logout */}\n              {Auth.loggedIn() ? (\n                <>\n                  <Nav.Link as={Link} to='/create'>\n                    Add Task\n                  </Nav.Link>\n                  <Nav.Link as={Link} to='/saved'>\n                    See Your Tasks\n                  </Nav.Link>\n                  <Nav.Link onClick={Auth.logout}>Logout</Nav.Link>\n                </>\n              ) : (\n                <Nav.Link onClick={() => setShowModal(true)}>Login/Sign Up</Nav.Link>\n              )}\n            </Nav>\n          </Navbar.Collapse>\n        </Container>\n      </Navbar>\n      {/* set modal data up */}\n      <Modal\n        size='lg'\n        show={showModal}\n        onHide={() => setShowModal(false)}\n        aria-labelledby='signup-modal'>\n        {/* tab container to do either signup or login component */}\n        <Tab.Container defaultActiveKey='login'>\n          <Modal.Header closeButton>\n            <Modal.Title id='signup-modal'>\n              <Nav variant='pills'>\n                <Nav.Item>\n                  <Nav.Link eventKey='login'>Login</Nav.Link>\n                </Nav.Item>\n                <Nav.Item>\n                  <Nav.Link eventKey='signup'>Sign Up</Nav.Link>\n                </Nav.Item>\n              </Nav>\n            </Modal.Title>\n          </Modal.Header>\n          <Modal.Body>\n            <Tab.Content>\n              <Tab.Pane eventKey='login'>\n                <LoginForm handleModalClose={() => setShowModal(false)} />\n              </Tab.Pane>\n              <Tab.Pane eventKey='signup'>\n                <SignUpForm handleModalClose={() => setShowModal(false)} />\n              </Tab.Pane>\n            </Tab.Content>\n          </Modal.Body>\n        </Tab.Container>\n      </Modal>\n    </>\n  );\n};\n\nexport default AppNavbar;\n","import React from 'react';\nimport { BrowserRouter as Router, Switch, Route } from 'react-router-dom';\nimport {\n  ApolloClient,\n  InMemoryCache,\n  ApolloProvider,\n  createHttpLink,\n} from '@apollo/client';\nimport { setContext } from '@apollo/client/link/context';\nimport CreateTask from './pages/CreateTask';\nimport LoginForm from './components/LoginForm';\nimport SavedTasks from './pages/SavedTasks';\nimport Navbar from './components/Navbar';\n\nconst httpLink = createHttpLink({\n  uri: '/graphql',\n});\n\nconst authLink = setContext((_, { headers }) => {\n  const token = localStorage.getItem('id_token');\n  return {\n    headers: {\n      ...headers,\n      authorization: token ? `Bearer ${token}` : '',\n    },\n  };\n});\n\nconst client = new ApolloClient({\n  link: authLink.concat(httpLink),\n  cache: new InMemoryCache(),\n});\n\nfunction App() {\n  return (\n    <ApolloProvider client={client}>\n      <Router>\n        <>\n          <Navbar />\n            <Switch>\n              <Route exact path='/' component={LoginForm} />\n              <Route exact path='/create' component={CreateTask} />\n              <Route exact path='/saved' component={SavedTasks} />\n              <Route render={() => <h1 className='display-2'>Wrong page!</h1>} />\n            </Switch>\n        </>\n      </Router>\n    </ApolloProvider>\n  );\n}\n\nexport default App;\n\n\n\n\n\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n    <App />,\n  document.getElementById('root')\n);"],"sourceRoot":""}